"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5401],{1226:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var a=i(4848),t=i(8453);const s={title:"Uploading to Central Staging Data Warehouse",id:"Uploading to Central Staging Data Warehouse",description:"Uploading to Central Staging Data Warehouse"},r="APPROVED",o={id:"Data-Upload-Update/Uploading to Central Staging Data Warehouse",title:"Uploading to Central Staging Data Warehouse",description:"Uploading to Central Staging Data Warehouse",source:"@site/docs/Data-Upload-Update/Data-Uploads.mdx",sourceDirName:"Data-Upload-Update",slug:"/Data-Upload-Update/Uploading to Central Staging Data Warehouse",permalink:"/Chorus_SOP/docs/Data-Upload-Update/Uploading to Central Staging Data Warehouse",draft:!1,unlisted:!1,editUrl:"https://github.com/chorus-ai/Chorus_SOP/edit/review/sop-website/docs/Data-Upload-Update/Data-Uploads.mdx",tags:[],version:"current",lastUpdatedBy:"Jared Houghtaling",lastUpdatedAt:1761679271,formattedLastUpdatedAt:"Oct 28, 2025",frontMatter:{title:"Uploading to Central Staging Data Warehouse",id:"Uploading to Central Staging Data Warehouse",description:"Uploading to Central Staging Data Warehouse"},sidebar:"sopSidebar",previous:{title:"Data Uploading",permalink:"/Chorus_SOP/docs/category/data-uploading"},next:{title:"Flowsheet Data",permalink:"/Chorus_SOP/docs/category/flowsheet-data"}},l={},d=[{value:"Terms and abbreviations",id:"terms-and-abbreviations",level:2},{value:"Related SOPs:",id:"related-sops",level:2},{value:"Upload Mechanisms",id:"upload-mechanisms",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Local File Organization",id:"local-file-organization",level:2},{value:"Existing Data Uploaded with Different Folder Structure",id:"existing-data-uploaded-with-different-folder-structure",level:3},{value:"Marking files as deleted",id:"marking-files-as-deleted",level:3},{value:"OMOP EHR Folder",id:"omop-ehr-folder",level:3},{value:"Images Folder",id:"images-folder",level:3},{value:"Waveforms Folder",id:"waveforms-folder",level:3},{value:"Local versioning",id:"local-versioning",level:3},{value:"Example Local Folder Structure",id:"example-local-folder-structure",level:3},{value:"Central Staging File Organization",id:"central-staging-file-organization",level:2},{value:"Central Staging Folder Structure (INFORMATIONAL)",id:"central-staging-folder-structure-informational",level:3},{value:"For Azure Data Share Users",id:"for-azure-data-share-users",level:2},{value:"For Current AZ CLI Users",id:"for-current-az-cli-users",level:2},{value:"Installation and Usage",id:"installation-and-usage",level:3},{value:"Alternatives Considered",id:"alternatives-considered",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"approved",children:"APPROVED"}),"\n",(0,a.jsx)(n.h1,{id:"purpose",children:"Purpose"}),"\n",(0,a.jsx)(n.p,{children:"The motivation of this Standard Operating Procedure (SOP) is to provide a tool to track a data generating site (DGS)'s file repository, identify changed files, and submit the changed files to the central CHoRUS cloud repository.  Two primary motivations for this SOP are"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Versioning of submitted data"}),". Any file from any prior submission should be accessible by CHoRUS users. This implies all past versions of files are tracked, and a database allows query for past versions."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Minimize the data upload"})," to only added and modified files.  Note that deleted DGS files are only marked and never removed from central storage."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Versioning of the DGS-submitted data and therefore the central dataset is critical for auditing, provenance, and reproducibility."}),"\n",(0,a.jsx)(n.p,{children:"This SOP specifies the expected processes for managing site data, uploading to the central CHoRUS cloud environment, the change-tracking process, and the submission process. This SOP describes"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"The required local data structure for DGSs"}),"\n",(0,a.jsx)(n.li,{children:"The central data structure  (INFORMATIONAL)"}),"\n",(0,a.jsx)(n.li,{children:"The data submission process"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["The SOP aims to simplify the process for submission package preparation and the actual submission.  A python based tool (",(0,a.jsx)(n.code,{children:"chorus-upload"}),") has been created to provides 2 primary functionalities:  dataset ",(0,a.jsx)(n.strong,{children:"journaling"}),", and file ",(0,a.jsx)(n.strong,{children:"upload"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"terms-and-abbreviations",children:"Terms and abbreviations"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"SOP: Standard Operating Procedure"}),"\n",(0,a.jsx)(n.li,{children:"DGS: Data generating site"}),"\n",(0,a.jsx)(n.li,{children:"Local: Refers to DGS's own storage or data.  Note that this could be on-premise or in DGS's own cloud."}),"\n",(0,a.jsx)(n.li,{children:"Staging: Refers to central CHoRUS storage or data in the DGS specific container in the Azure cloud"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"related-sops",children:"Related SOPs:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Data-Request"}),"\n",(0,a.jsx)(n.li,{children:"Imaging-Data"}),"\n",(0,a.jsx)(n.li,{children:"Waveform-Data"}),"\n",(0,a.jsx)(n.li,{children:"Multimodal-Linkage"}),"\n"]}),"\n",(0,a.jsx)(n.h1,{id:"tooling-and-automation",children:"Tooling and Automation"}),"\n",(0,a.jsx)(n.h2,{id:"upload-mechanisms",children:"Upload Mechanisms"}),"\n",(0,a.jsxs)(n.p,{children:["CHoRUS data files may be uploaded to the cloud using one of two mechanisms:  ",(0,a.jsx)(n.code,{children:"chorus-upload"}),", or Azure Data Share.   The ",(0,a.jsx)(n.code,{children:"chorus-upload"})," tool can upload using its integrated Azure Python SDK routines or via a generated az-cli script, both executed via commandline.  Azure Data Share is available to DGS that stores local data in its own Azure account, and is configured to automatically pull changed files into CHoRUS cloud staging storage."]}),"\n",(0,a.jsx)(n.p,{children:"The difference between the upload methods are as follows:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"chorus-upload"})," with internal routines supports multithreading."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"chorus-upload"})," generates a script that uses the Azure CLI tools (",(0,a.jsx)(n.code,{children:"azcli"}),") which may be useful for DGSs that have already security reviewed ",(0,a.jsx)(n.code,{children:"azcli"})," tools."]}),"\n",(0,a.jsx)(n.li,{children:"Azure Data Share does not require DGS local user actions.  The dataset journaling task will be performed in cloud, but an additional copy of the staged files will incur a 2X storage footprint.  File deletion tracking is not supported."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"chorus-upload"})," tool has the following assumptions"]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"The DGS has a local on-prem or in-cloud storage.  A DGS may use different storage for each of the data modalities, e.g. images in AWS and waveform and OMOP files in on-prem file system."}),"\n",(0,a.jsxs)(n.li,{children:["The DGS may choose to maintain all files in the local storage (",(0,a.jsx)(n.code,{children:"full"})," mode), or only the new and updated files since last submission (",(0,a.jsx)(n.code,{children:"append"})," mode) to reduce local space usage."]}),"\n",(0,a.jsxs)(n.li,{children:["The DGS will organize the files using the folder structure as described in the ",(0,a.jsx)(n.a,{href:"#local_file_organization",children:"Local File Organization"})," section below."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Please note that ",(0,a.jsx)(n.code,{children:"full"})," mode is recommended as it supports tracking file deletion and can facilitate data QC.  File deletions are not tracked with Azure Data Share regardless of whether ",(0,a.jsx)(n.code,{children:"full"})," or ",(0,a.jsx)(n.code,{children:"append"})," mode is chosen."]}),"\n",(0,a.jsx)(n.h2,{id:"local-file-organization",children:"Local File Organization"}),"\n",(0,a.jsxs)(n.p,{children:["This SOP and the ",(0,a.jsx)(n.code,{children:"chorus-upload"})," tool scans a DGS's data folder structure to generate a journal (aka manifest) as an SQLite file, which is stored in the DGS's Central cloud container.  Each scan updates the SQLite with additions, deletions, and modifications, and tracks the time of the change.  The scan requires a consistent folder structure and therefore it is CRITICAL for the DGS to adhere to the local folder structure.  The tool can be configured to scan in ",(0,a.jsx)(n.code,{children:"full"})," or ",(0,a.jsx)(n.code,{children:"append"})," mode."]}),"\n",(0,a.jsx)(n.p,{children:"The DGS-local Folder Structure should be organized into the structure as shown below.  The Update tool expects the organizational structure below for identifying the changed file sets:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Local Data Organization",src:i(8894).A+"",width:"3233",height:"1608"})}),"\n",(0,a.jsxs)(n.p,{children:["Each DGS shall maintain data files in the folder structure shown above for either ",(0,a.jsx)(n.code,{children:"full"})," or ",(0,a.jsx)(n.code,{children:"append"})," mode storage. The root folder shall contain an ",(0,a.jsx)(n.code,{children:"OMOP"})," folder, and patient folders named by DGS's de-identified patient IDs.  Each patient directory should contain an ",(0,a.jsx)(n.code,{children:"Images"})," folder and a ",(0,a.jsx)(n.code,{children:"Waveforms"})," folder."]}),"\n",(0,a.jsx)(n.h3,{id:"existing-data-uploaded-with-different-folder-structure",children:"Existing Data Uploaded with Different Folder Structure"}),"\n",(0,a.jsxs)(n.p,{children:["Each DGS is required to organize the data files in this folder structure.  For DGSs who have previously uploaded data with a different folder structure, it is recommended that the DGS first locally re-organize the data and then use the ",(0,a.jsx)(n.code,{children:"chorus-upload"})," tool to RESUBMIT all existing data."]}),"\n",(0,a.jsx)(n.h3,{id:"marking-files-as-deleted",children:"Marking files as deleted"}),"\n",(0,a.jsxs)(n.p,{children:["(Not applicable to Azure Data Share) In ",(0,a.jsx)(n.code,{children:"full"})," mode, files removed from the folder structure will be considered ",(0,a.jsx)(n.code,{children:"deleted"}),".  In ",(0,a.jsx)(n.code,{children:"append"})," mode, a DGS user can manually supply a list of files to be marked as deleted."]}),"\n",(0,a.jsx)(n.h3,{id:"omop-ehr-folder",children:"OMOP EHR Folder"}),"\n",(0,a.jsxs)(n.p,{children:["This folder shall include structured and unstructured 13 OMOP clinical data files(exluding specimen table) as found here (",(0,a.jsx)(n.a,{href:"https://ohdsi.github.io/CommonDataModel/cdm54.html#Clinical_Data_Tables",children:"https://ohdsi.github.io/CommonDataModel/cdm54.html#Clinical_Data_Tables"}),'). We are not requiring actual notes to be included in the "note_text" field of the NOTE table, but since working with the NOTE_NLP table would greatly benefit from access to foreign keys only present in the NOTE table. Thus the note table should at least contain core identifiers (note_id), descriptors (note_type_concept_id and note_class_concept_id) as well as there foreign keys to PERSON, VISIT_OCURRENCE, VISIT_DETAILS. Each of these table will be in the form of comma delimited files with header rows.']}),"\n",(0,a.jsx)(n.p,{children:"Each OMOP file should contain records for ALL ACTIVE patients submitted to CHoRUS to date. The OMOP files are a complete snapshot of current DGS local CHoRUS OMOP tables."}),"\n",(0,a.jsx)(n.h3,{id:"images-folder",children:"Images Folder"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"Images"})," folder should contain all images for the patient, with images organized in standard DICOM hierarchy with study/series folders."]}),"\n",(0,a.jsx)(n.p,{children:"Folder and File names should follow the format below:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Patient Identification: Typically includes a de-identified person ID."}),"\n",(0,a.jsx)(n.li,{children:"Study Id: The study Id, may be a de-identified version of DICOM tags StudyInstanceUID or StudyId."}),"\n",(0,a.jsx)(n.li,{children:"Series Id: The series Id, may be a de-identified version of DICOM tags SeriesInstanceUID or SeriesNumber."}),"\n",(0,a.jsx)(n.li,{children:"Modality: Refers to the type of equipment used for the scan, such as MR (Magnetic Resonance), CT (Computed Tomography), XR (X-ray), or US (Ultrasound)."}),"\n",(0,a.jsx)(n.li,{children:"Instance Number: Represents the specific image number within a series."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Example of a DICOM Image folder and filenames"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"root\n  \u251c\u2500\u2500 10001001\n      \u251c\u2500\u2500 Images\n          \u251c\u2500\u2500 1234\n              \u251c\u2500\u2500 5678\n                  \u251c\u2500\u2500 10001001_1234_5678_CT_000.dcm\n                  \u251c\u2500\u2500 10001001_1234_5678_CT_001.dcm\n                  \u251c\u2500\u2500 10001001_1234_5678_CT_002.dcm\n                  ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"This example would represent a CT scan for patient 1000100020 with Study Id 1234 and Series Id 5678. This image is the first in that series. Please Make sure that these fields match the dicom metadata tags."}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Optional"}),": Inclusion of patient id, study id, and series id in the filename helps to recover orphaned files but is optional."]}),"\n"]}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Deprecated"}),": The following description was from the initial data upload SOP and has been superseded."]}),"\n",(0,a.jsx)(n.p,{children:"File names should follow the format below:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Patient Identification: Typically includes a person ID."}),"\n",(0,a.jsx)(n.li,{children:"Study Date: The date when the study was conducted, usually in the format YYYYMMDD."}),"\n",(0,a.jsx)(n.li,{children:"Study Time: The time of the study, often in HHMMSS format."}),"\n",(0,a.jsx)(n.li,{children:"Modality: Refers to the type of equipment used for the scan, such as MR (Magnetic Resonance), CT (Computed Tomography), or US (Ultrasound)."}),"\n",(0,a.jsx)(n.li,{children:"Series Number: Indicates the sequence of a particular series of images in a study."}),"\n",(0,a.jsx)(n.li,{children:"Instance Number: Represents the specific image number within a series."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Example of a DICOM Image Name"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"PersonID_20230101_101530_CT_01_001.dcm\n"})}),"\n",(0,a.jsx)(n.p,{children:"This example would represent a CT scan for a patient, conducted on January 1, 2023, at 10:15:30. This image is the first in its instances and the first in that series. Make sure instance and series match with dicom metadata."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"waveforms-folder",children:"Waveforms Folder"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"Waveforms"})," folder should contain all waveforms for the patient organized into ",(0,a.jsx)(n.code,{children:"session"})," folders, each session containing a set of files corresponding to a continuous recording session."]}),"\n",(0,a.jsx)(n.p,{children:"Waveform data refers to all data acquired from bedside monitors and devices, including alarms, numerics data obtained at regular or irregular intervals, and high-frequency (>1 Hz) waveform data such as digitized EKG tracings. The waveforms should be deidentified.   For Y1 submission, WFDB file format is recommended but not required."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Patient Identification: A unique person ID, typically a number or numeric digits from OMOP Person Table."}),"\n",(0,a.jsx)(n.li,{children:"Session Id: The date when the waveform data was recorded, in the format YYYYMMDD."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Example HDF5 File Name"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"root\n  \u251c\u2500\u2500 10001001\n      \u251c\u2500\u2500 Waveforms\n          \u251c\u2500\u2500 10001001_901234\n              \u251c\u2500\u2500 10001001_901234.hea\n              \u251c\u2500\u2500 10001001_901234_layout.hea\n              \u251c\u2500\u2500 10001001_901234_0001.hea\n              \u251c\u2500\u2500 10001001_901234_0001.dat\n              \u251c\u2500\u2500 10001001_901234_0002.hea\n              \u251c\u2500\u2500 10001001_901234_0002.dat\n              ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"The name of the file itself may take different forms depending on the format.   This example represents a recording for patient 1000001 for session 901234 with the files in WFDB format.  For WFDB files, please follow naming convention in the Waveform SOP.   For other formats (Y1 only), it is recommended that a similar file naming convention be used."}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Optional"})," Inclusion of patient id and session id in the filename is optional.  Inclusion of the duration is also optional and for WFDB is unnecessary."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Duration in Seconds: The duration of the recording in seconds."}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"10001001/Waveforms/1001001_901234/1001001_901234_3600.h5\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Deprecated"}),": The following description was from the initial data upload SOP and has been superseded."]}),"\n",(0,a.jsx)(n.p,{children:"Files should be named using the following format:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Patient Identification: A unique person ID, typically a number or numeric digits from OMOP Person Table."}),"\n",(0,a.jsx)(n.li,{children:"Start Date: The date when the waveform data was recorded, in the format YYYYMMDD."}),"\n",(0,a.jsx)(n.li,{children:"Start Time: The start time of the recording, in HHMMSS format."}),"\n",(0,a.jsx)(n.li,{children:"Duration in Seconds: The duration of the recording in seconds."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Example File Name"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"1000001_20230101_101530_3600.h5\n"})}),"\n",(0,a.jsx)(n.p,{children:"This example represents a recording for patient 1000001 on January 1, 2023, starting at 10:15:30, with a duration of 3600 seconds."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"local-versioning",children:"Local versioning"}),"\n",(0,a.jsx)(n.p,{children:"Sites may wish to separately maintain prior versions of OMOP files at their own discretion (we strongly recommend doing so).  A prescribed organization or naming convention is not provided.  Note also that all previously submitted OMOP files will remain in the Central Staging area."}),"\n",(0,a.jsxs)(n.p,{children:["Currently, the ",(0,a.jsx)(n.code,{children:"chorus-upload"}),' tool does not explicitly support placing the files to be submitted in a dated directory, e.g. [root folder] of the form "20241101", but this can be handled by changing the configuration file for chorus-extract-update, IF ',(0,a.jsx)(n.code,{children:"append"})," mode is chosen."]}),"\n",(0,a.jsx)(n.h3,{id:"example-local-folder-structure",children:"Example Local Folder Structure"}),"\n",(0,a.jsx)(n.p,{children:"Example folder and file structure for a single patient is shown below:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"root\n  \u251c\u2500\u2500 OMOP\n      \u251c\u2500\u2500 ...\n  \u251c\u2500\u2500 10001001\n      \u251c\u2500\u2500 Images\n          \u251c\u2500\u2500 1234\n              \u251c\u2500\u2500 5678\n                  \u251c\u2500\u2500 10001001_1234_5678_CT_000.dcm\n                  \u251c\u2500\u2500 10001001_1234_5678_CT_001.dcm\n                  \u251c\u2500\u2500 10001001_1234_5678_CT_002.dcm\n                  ...\n      \u251c\u2500\u2500 Waveforms\n          \u251c\u2500\u2500 10001001_901234\n              \u251c\u2500\u2500 10001001_901234.hea\n              \u251c\u2500\u2500 10001001_901234_layout.hea\n              \u251c\u2500\u2500 10001001_901234_0001.hea\n              \u251c\u2500\u2500 10001001_901234_0001.dat\n              \u251c\u2500\u2500 10001001_901234_0002.hea\n              \u251c\u2500\u2500 10001001_901234_0002.dat\n              ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"This structure shall be maintained for all submissions.  All additions, deletions, and modifications shall be made in this structure."}),"\n",(0,a.jsx)(n.p,{children:"A relaxation of the folder structure is that OMOP, images, and waveforms files may be stored in separate file systems.  For example, images may be stored in the AWS cloud, while waveforms may be stored in an on-prem Linux file system.  Each file system shall maintain the same organization, for example:"}),"\n",(0,a.jsx)(n.p,{children:"for example AWS S3 bucket:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"root\n  \u251c\u2500\u2500 /10001001\n      \u251c\u2500\u2500 Images\n          \u251c\u2500\u2500 1.2.840.113619.2.176.3596.6358730.30068.1592383800.1.1\n              \u251c\u2500\u2500 1.2.840.113619.2.176.3596.6358730.30068.1592383800.2.1\n                  \u251c\u2500\u2500 10001001_20220401_113120_CT_01_0.dcm\n                  \u251c\u2500\u2500 10001001_20220401_113120_CT_01_1.dcm\n                  \u251c\u2500\u2500 10001001_20220401_113120_CT_01_2.dcm\n                  ...\n"})}),"\n",(0,a.jsx)(n.h2,{id:"central-staging-file-organization",children:"Central Staging File Organization"}),"\n",(0,a.jsxs)(n.p,{children:["This virtual environment is hosted in an Azure platform. The containers structure is setup such that each DGS has its own container (e.g. mgh).  The container name for each DGS is used in the ",(0,a.jsx)(n.code,{children:"config.toml"})," files as ",(0,a.jsx)(n.code,{children:"[DGS_container]"})," in the ",(0,a.jsx)(n.a,{href:"#configuration",children:"Configuration"})," section."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:"https://github.com/chorus-ai/data_acq_SOP/assets/2847495/d7d1d67a-2695-4b2d-92aa-2285b608a09d",alt:"Central Data Organization"})}),"\n",(0,a.jsx)(n.h3,{id:"central-staging-folder-structure-informational",children:"Central Staging Folder Structure (INFORMATIONAL)"}),"\n",(0,a.jsxs)(n.p,{children:["The submitted data will be organized using the same folder structure as the DGS local file store, except that data for each submission will placed in a top level folder named with a timestamp of the format ",(0,a.jsx)(n.code,{children:"YYYYMMDDhhmmss"}),".  The folder structure is shown here for context.  The timestamped folder will be created automatically by the ",(0,a.jsx)(n.code,{children:"chorus-upload"})," tool."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Central Data Organization",src:i(7324).A+"",width:"3651",height:"1818"})}),"\n",(0,a.jsx)(n.p,{children:"In the diagram above, the gray directories were added, blue folder has modifications, and orange folder has been deleted."}),"\n",(0,a.jsx)(n.h1,{id:"data-preparation-and-upload-process",children:"Data Preparation and Upload Process"}),"\n",(0,a.jsx)(n.h2,{id:"for-azure-data-share-users",children:"For Azure Data Share Users"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["The DGS local data shall be organized according to the ",(0,a.jsx)(n.a,{href:"#file-organization",children:"File Organization"})," section."]}),"\n",(0,a.jsx)(n.li,{children:'The Azure Data Share shall be configured to copy data into a "staging" folder in the DGS container.'}),"\n",(0,a.jsxs)(n.li,{children:["(INFORMATIONAL) The staging data will be scanned to create/update a journal database (by ",(0,a.jsx)(n.code,{children:"chorus-upload"}),") and copied to the a dated directory monthly."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"for-current-az-cli-users",children:"For Current AZ CLI Users"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"chorus-upload"})," tool is required for sites that are not using Azure Data Share."]}),"\n",(0,a.jsxs)(n.p,{children:["The code is available in ",(0,a.jsx)(n.a,{href:"https://github.com/chorus-ai/chorus-extract-upload",children:"chorus-extract-upload"})," repository."]}),"\n",(0,a.jsx)(n.h3,{id:"installation-and-usage",children:"Installation and Usage"}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"MOVED"})," Please refer to ",(0,a.jsx)(n.a,{href:"https://github.com/chorus-ai/chorus-extract-upload/edit/main/README.md",children:"Readme.md"})," for installation and usage instructions."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"alternatives-considered",children:"Alternatives Considered"}),"\n",(0,a.jsx)(n.p,{children:"Alternative approaches considered for versioning include"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Azure Blob Storage's versioning: it does not support concurrent access of multiple data versions by multiple users without explicit downloading."}),"\n",(0,a.jsx)(n.li,{children:"Azure Blob Storage's snapshots: snapshots are timestamped, but identifying files that belong to a time frame for public data release is difficult."}),"\n",(0,a.jsx)(n.li,{children:"Azure Blob Storage soft delete: soft delete allows deleted files to be accessed, but is time limited, and does not support versioning or timestamp."}),"\n",(0,a.jsx)(n.li,{children:"Git Large File Storage: git based file versioning but would require full checkout to access a past version."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Alternative approaches to minimize data movement include"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"azcopy, rsync:  these methods reduce data transmission to changed set, but do not track past history or deleted files."}),"\n",(0,a.jsx)(n.li,{children:"Azure Data Share:  current approach copies files to ensure CHoRUS maintains control over submitted data; moving changed set renders it similar to rsync and azcopy."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},7324:(e,n,i)=>{i.d(n,{A:()=>a});const a=i.p+"assets/images/Central_Structure-ad125fd0c34bf4d09f0d7aaecff675ed.png"},8894:(e,n,i)=>{i.d(n,{A:()=>a});const a=i.p+"assets/images/Local_Structure-e367e087cc64cc1522b9f81e0fbd2e1d.png"},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>o});var a=i(6540);const t={},s=a.createContext(t);function r(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);